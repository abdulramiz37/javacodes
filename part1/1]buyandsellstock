leetcode

approach 1 optimal

public class Solution {
    public int maxProfit(int []arr) {
        int n=arr.length;
     
    	int min=Integer.MAX_VALUE,profit=0;
		for(int i=0;i<n;i++)
		{
			if(arr[i]<min)
			{
				min=arr[i];
			}
			else
			{
				int profit1=arr[i]-min;
				profit=Math.max(profit, profit1);
			}
		}
      return profit;
    }
}

approach 2 bruteforce


public class Solution {
    public int maxProfit(int []arr) {
        int n=arr.length;
     
		int profit=0;
		for(int i=0;i<n;i++)
		{
			for(int j=i;j<n;j++)
			{
				if(arr[i]<arr[j])
				{
					int profit1=arr[j]-arr[i];
					profit=Math.max(profit, profit1);
				}
			}
		}
      return profit;
    }
}


coding with ninJAS

import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution{
    public static int maximumProfit(ArrayList<Integer> arr){
        int n=arr.size();
     int min=Integer.MAX_VALUE,profit=0;
        for(int i=0;i<n;i++)
        {
            if(arr.get(i)<min)
            {
                min=arr.get(i);
            }
            else
            {
                int profit1=arr.get(i)-min;
                profit=Math.max(profit, profit1);
            }
        }
      return profit;
    }
}
